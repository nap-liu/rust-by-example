//!
//! `cargo` 是官方提供的一个包管理工具，
//! 包含了非常多特性的可以提升代码的质量和开发效率
//!
//! 包含的特性如下
//! - 通过 `crates.io` (官方维护的包注册库)来管理管理包的集成和依赖管理
//! - 内置单元测试
//! - 内置基准测试
//!

//!
//! 大多数的程序都会使用外部的库，如果你曾经手动管理过依赖的话，肯定会知道手动管理依赖是非常困难的事情。
//! `Rust` 的生态系统包含了很多标准的库，可以通过 `cargo` 来管理工程。
//!
//! 通过 `cargo` 创建工程
//! `cargo new foo` 创建一个可行文件的工程
//!
//! 通过 `cargo` 创建库
//! `cargo new --lib bar` 创建一个库
//!
//! 创建完以后会自动生成一个目录，目录结构如下
//!
//! ```sh
//! .
//! ├── bar
//! │   ├── Cargo.toml // 当前工程的配置文件
//! │   └── src
//! │       └── lib.rs // 库的入口文件
//! └── foo
//!     ├── Cargo.toml
//!     └── src
//!         └── main.rs // 可执行文件的入口文件
//!
//! ```
//!
//! `Cargo.toml` 文件内容如下
//! ```toml
//! [package]
//! name = "foo"
//! version = "0.1.0"
//! authors = ["mark"]

//! [dependencies]
//! ```
//!
//! `[package]` 下面的 `name` 表示当前工程的名字，这个名字就是发布到 `crates.io` 上面的名字，
//! 并且该名字还是输出的二进制文件名。
//! `version` 是一个语义化的版本号。
//! `authors` 是当前的用户名，也是将来发布到 `crates.io` 上面的以后使用的名字。
//!
//! `[dependencies]` 就是当前工程所需要的依赖项了，这些依赖项都会自动从 `crates.io` 上面下载。
//! 你可以在 `creates.io` 上面找到你所需要的依赖包，这里使用 `clap` 举例子，这个包现在最新的版本是 `4.4.11`
//! 我们可以在 `[dependencies]` 下添加 `clap = "4.4.11"`，这样我们就可以在工程中使用 `clap` 了。
//!
//! `[dependencies]` 还支持更多语法，常用的有下面几种
//!
//! ```toml
//! clap = "2.27.1" # 从 `crates.io` 上面下载
//! rand = { git = "https://github.com/rust-lang-nursery/rand" } # 从指定的 `git` 仓库中下载
//! bar = { path = "../bar" } # 使用本地文件目录
//! ```
//!
//! 我们可以在工程的任意目录中使用 `cargo build` 来构建工程，或者使用 `cargo run` 来直接运行工程。
//! 这两个命令都会自动的去下载工程中所需要的依赖项。
//!
//!

fn main() {
    println!("Hello, world!");
}
